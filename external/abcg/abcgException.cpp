/**
 * @file abcgException.cpp
 * @brief Definition of abcg::Exception members.
 *
 * This file is part of ABCg (https://github.com/hbatagelo/abcg).
 *
 * @copyright (c) 2021--2023 Harlen Batagelo. All rights reserved.
 * This project is released under the MIT License.
 */

#include "abcgException.hpp"
#include "abcgUtil.hpp"

#include <SDL_image.h>

/**
 * @brief Constructs an abcg::Exception object.
 *
 * @param what String view of the explanatory information, typically a
 * pretty-printed string generated by abcg::Exception::runtime,
 * abcg::Exception::OpenGL, abcg::Exception::SDL, or abcg::Exception::SDLImage.
 */
abcg::Exception::Exception(std::string_view what) : m_what{what} {}

/**
 * @brief Returns the explanatory string.
 *
 * @return Pointer to a null-terminated string with explanatory information.
 */
char const *abcg::Exception::what() const noexcept { return m_what.data(); };

#if !defined(NDEBUG) && !defined(__EMSCRIPTEN__) && !defined(__APPLE__)
/**
 * @brief Constructs an abcg::RuntimeError object.
 *
 * @param what Explanatory string.
 * @param sourceLocation Information about the source code.
 *
 * The object generates a color-coded string containing the explanatory string
 * and the source code information.
 */
abcg::RuntimeError::RuntimeError(std::string_view what,
                                 source_location const &sourceLocation)
    : Exception(prettyPrint(what, sourceLocation)) {}

std::string
abcg::RuntimeError::prettyPrint(std::string_view what,
                                source_location const &sourceLocation) {
  return toRedString(what.data()) + " in " + sourceLocation.file_name() + ":" +
         std::to_string(sourceLocation.line()) + ", " +
         toYellowString(sourceLocation.function_name()) + "\n";
}

/**
 * @brief Constructs an abcg::SDLError object.
 *
 * @param what Explanatory string.
 * @param sourceLocation Information about the source code.
 *
 * The object generates a color-coded string containing the explanatory string,
 * the result of `SDL_GetError`, and the source code information.
 */
abcg::SDLError::SDLError(std::string_view what,
                         source_location const &sourceLocation)
    : Exception(prettyPrint(what, sourceLocation)) {}

std::string abcg::SDLError::prettyPrint(std::string_view what,
                                        source_location const &sourceLocation) {
  return toRedString(what.data()) + " (" + SDL_GetError() + ") in " +
         sourceLocation.file_name() + ":" +
         std::to_string(sourceLocation.line()) + ", " +
         toYellowString(sourceLocation.function_name()) + "\n";
}

/**
 * @brief Constructs an abcg::SDLError object.
 *
 * @param what Explanatory string.
 * @param sourceLocation Information about the source code.
 *
 * The object generates a color-coded string containing the explanatory string,
 * the result of `IMG_GetError`, and the source code information.
 */
abcg::SDLImageError::SDLImageError(std::string_view what,
                                   source_location const &sourceLocation)
    : Exception(prettyPrint(what, sourceLocation)) {}

std::string
abcg::SDLImageError::prettyPrint(std::string_view what,
                                 source_location const &sourceLocation) {
  return toRedString(what.data()) + " (" + IMG_GetError() + ") in " +
         sourceLocation.file_name() + ":" +
         std::to_string(sourceLocation.line()) + ", " +
         toYellowString(sourceLocation.function_name()) + "\n";
}
#else
abcg::RuntimeError::RuntimeError(std::string_view what)
    : Exception(prettyPrint(what)) {}

std::string abcg::RuntimeError::prettyPrint(std::string_view what) {
  return toRedString(what.data()) + "\n";
}

abcg::SDLError::SDLError(std::string_view what)
    : Exception(prettyPrint(what)) {}

std::string abcg::SDLError::prettyPrint(std::string_view what) {
  return toRedString(what.data()) + " (" + SDL_GetError() + ")\n";
}

abcg::SDLImageError::SDLImageError(std::string_view what)
    : Exception(prettyPrint(what)) {}

std::string abcg::SDLImageError::prettyPrint(std::string_view what) {
  return toRedString(what.data()) + " (" + IMG_GetError() + ")\n";
}
#endif